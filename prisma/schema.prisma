generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

enum Status {
  Draft
  Published
}

enum ContentType {
  Folder
  Content
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  password      String?
  role          Role        @default(User)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bugReports    BugReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Tutorials {
  id              Int               @id @default(autoincrement())
  title           String
  description     String
  slug            String            @unique
  status          Status            @default(Draft)
  tutorialContent TutorialContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TutorialContent {
  tutorials   Tutorials @relation(fields: [tutorialsId], references: [id])
  tutorialsId Int
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   Int

  @@id([tutorialsId, contentId])
}

model Content {
  id              Int            @id @default(autoincrement())
  type            ContentType    @default(Folder)
  title           String
  description     String?
  hidden          Boolean        @default(false)
  isPublished     Boolean        @default(false)
  thumbnail       String?
  topicMetadata   TopicMetadata?
  topicMetadataId Int?
  sortingOrder    Int

  parent   Content?          @relation(name: "ContentToContent", fields: [parentId], references: [id])
  parentId Int?
  children Content[]         @relation("ContentToContent")
  tutorial TutorialContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TopicMetadata {
  id        Int     @id @default(autoincrement())
  Content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId Int     @unique

  slug            String @unique
  content         Json
  metaTitle       String
  metaDescription String
}

enum BugPriority {
  low
  medium
  high
}

model BugReport {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  title        String
  description  String
  whichSection String
  priority     BugPriority

  createdAt DateTime @default(now())
}
